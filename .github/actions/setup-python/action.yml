name: 'Setup Python Environment'
description: 'Setup Python with caching, pip dependencies, and common development tools'
author: 'Real AI Engineering'

inputs:
  python-version:
    description: 'Python version to setup'
    required: false
    default: '3.12'
  install-dev-deps:
    description: 'Install development dependencies (requirements-dev.txt, pyproject.toml dev extras)'
    required: false
    default: 'true'
  cache-key-suffix:
    description: 'Additional suffix for cache key'
    required: false
    default: ''
  working-directory:
    description: 'Working directory for Python setup'
    required: false
    default: '.'

outputs:
  python-version:
    description: 'The exact Python version that was installed'
    value: ${{ steps.setup-python.outputs.python-version }}
  cache-hit:
    description: 'Whether pip cache was hit'
    value: ${{ steps.pip-cache.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python ${{ inputs.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          ${{ inputs.working-directory }}/requirements*.txt
          ${{ inputs.working-directory }}/pyproject.toml
          ${{ inputs.working-directory }}/setup.py

    - name: Cache pip dependencies
      id: pip-cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles(format('{0}/requirements*.txt', inputs.working-directory), format('{0}/pyproject.toml', inputs.working-directory)) }}${{ inputs.cache-key-suffix }}
        restore-keys: |
          pip-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

    - name: Upgrade pip and install build tools
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Install main dependencies
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        elif [ -f "pyproject.toml" ]; then
          pip install -e .
        elif [ -f "setup.py" ]; then
          pip install -e .
        fi

    - name: Install development dependencies
      if: inputs.install-dev-deps == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Install dev dependencies
        if [ -f "requirements-dev.txt" ]; then
          pip install -r requirements-dev.txt
        elif [ -f "requirements_dev.txt" ]; then
          pip install -r requirements_dev.txt
        elif [ -f "pyproject.toml" ] && grep -q "\[project.optional-dependencies\]" pyproject.toml; then
          pip install -e ".[dev]" || pip install -e ".[test]" || echo "No dev extras found"
        fi
        
        # Install common dev tools if not already present
        pip install ruff black mypy pytest pytest-cov bandit safety || echo "Some dev tools failed to install"

    - name: Display Python environment info
      shell: bash
      run: |
        echo "Python version: $(python --version)"
        echo "Python executable: $(which python)"
        echo "Pip version: $(pip --version)"
        echo "Installed packages:"
        pip list