name: Go CI

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:

env:
  GO_VERSION: '1.25'

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: Real-AI-Engineering/vibe-pipeline/.github/actions/setup-go@main
        with:
          go-version: ${{ env.GO_VERSION }}
          install-tools: 'true'

      - name: Run gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run goimports
        run: |
          if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
            echo "The following files need import fixes:"
            goimports -l .
            exit 1
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run errcheck
        run: errcheck ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: Real-AI-Engineering/vibe-pipeline/.github/actions/setup-go@main
        with:
          go-version: ${{ env.GO_VERSION }}
          install-tools: 'true'

      - name: Run gosec security scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'

      - name: Run govulncheck
        run: govulncheck ./...

      - name: Run nancy (dependency vulnerability check)
        run: |
          go list -json -deps ./... | nancy sleuth

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec.sarif

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.25']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: Real-AI-Engineering/vibe-pipeline/.github/actions/setup-go@main
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html

      - name: Upload coverage to Codecov
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: Real-AI-Engineering/vibe-pipeline/.github/actions/setup-go@main
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          binary_name="app-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          go build -ldflags="-s -w" -o "dist/${binary_name}" ./...

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/