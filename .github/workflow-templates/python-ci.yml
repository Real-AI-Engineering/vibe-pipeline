name: Python CI

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '**/*.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'setup.py'
      - 'setup.cfg'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**/*.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'setup.py'
      - 'setup.cfg'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: Real-AI-Engineering/vibe-pipeline/.github/actions/setup-python@main
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-dev-deps: 'true'

      - name: Run ruff linter
        run: |
          ruff check . --output-format=github
          ruff format . --check

      - name: Run black formatter check
        run: black . --check --diff

      - name: Run mypy type checker
        run: mypy . --ignore-missing-imports || echo "MyPy check completed with warnings"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: Real-AI-Engineering/vibe-pipeline/.github/actions/setup-python@main
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-dev-deps: 'true'

      - name: Run bandit security linter
        run: bandit -r . -f json -o bandit-report.json || echo "Bandit completed with findings"

      - name: Run safety dependency check
        run: safety check --json --output safety-report.json || echo "Safety completed with findings"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: Real-AI-Engineering/vibe-pipeline/.github/actions/setup-python@main
        with:
          python-version: ${{ matrix.python-version }}
          install-dev-deps: 'true'

      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term-missing --junitxml=pytest-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            pytest-results.xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: Real-AI-Engineering/vibe-pipeline/.github/actions/setup-python@main
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build distribution
        run: |
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/